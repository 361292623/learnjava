package com.itheima._01异常的概述和体系;
/*
* 异常：
*   程序在编译或运行过程中可能出现的问题则称为异常。
*
*   异常是程序员在设计代码的时候应该尽可能避免。
*   否则程序会出错，异常一旦出现程序如果不处理程序就立即死亡了。
*   所以程序员应该提前处理或者避免异常。
*   从现实角度来看，软件是没有完美的，异常可能是无法做到绝对避免的，所以
*   Java提供了异常处理机制，让程序员可以实现通过代码去捕获可能出现的一切问题。
*
*   Java异常处理机制是为了提高程序的健壮性。
*
* 异常的体系：
*   Java为可能出现的所有异常都做了分类。
*   异常的根类是Exception,所以代码出现的异常都是继承自Exception
*
*   Throwable(Java中错误或者异常的根类)
*   /          \
*  Error       Exception
*              /       \
*            其他      RuntimeException(运行时异常)
*  Error:系统级别错误，比如JVM死机了，错误是程序无法处理的，错误一出现只能重启环境。
*  Exception : 程序在编译或运行过程中可能出现的问题,需要避免，需要提前处理。
*              程序员是需要处理异常的。
* 异常分类：
*    异常总共分为两大类。
*
*    运行时异常:这个异常是在编译阶段不会报错，但是在运行阶段可能会出错的
*             运行时异常一定是继承了RuntimeException或者就是
*             RuntimeException自己的异常。
*
*    编译时异常：这个异常是在编译阶段就会报错，是用来提醒程序员你的代码可能会
*             出错，请注意您的编码。
*             编译时异常一定是继承自Exception,但是一定没有继承
*             RuntimeException。
*
*/
public class ExceptionDemo01 {

}
