01.能够辨别程序中异常和错误的区别。
   错误：系统级别错误，JVM虚拟机死亡，无法处理，只能重启修正环境问题。
   异常：在程序编译或者运行的过程中可能出现的错误。
         事先应该尽量避免异常的出现，同时也需要事先处理异常。

02.说出异常的分类。
   异常的体系（Exception）。
  *         Throwable
  *      /          \
  *    Error(错误)      Exception(异常)
  *                    /               \
  *              其他子类(编译时异常)      RuntimeException(运行时异常)
  *
  *  异常的分类,异常分为编译时异常，和运行时异常
  *     （1）编译时异常（必须检查异常，必须捕获异常）
  *         是Exception异常或者是它的子类异常，但是不是RuntimeException异常
  *         编译时异常是在编译阶段就会报错！
  *
  *     （2）运行时异常（非必需检查异常，非必需捕获异常）
  *         是RuntimeException异常，或者是它的子类异常都是运行时异常。
  *         运行时异常编译阶段不会报错，在运行的时候可能出现的错误。
  *

03.说出虚拟机处理异常的方式。
      异常的产生过程：
     *   （1）从出现异常代码那里开始
     *   （2）自动在这里创建一个异常对象 ： ArithmeticException
     *   （3）把这个异常对象抛给调用者。
     *   （4）调用者会继续的往外抛给main方法，main方法会抛给JVM虚拟
     *   （5）JVM虚拟机会做两个动作：
     *       a.结束当前程序。
     *       b.把异常对象的异常栈信息输出到控制台。

04. 列举出常见的三个运行期异常
      常见的运行时异常（面试题）:
         （1）ArrayIndexOutOfBoundsException 数组越界异常.
         （2）NullPointerException 空指针异常
             原因是对象是null，而后面依然去操作这个对象的方法了或者属性等。
         （3）ClassCastException 类型转换异常。
         （4）NumberFormatException 数字转换异常。
         （5）ArithmeticException 数学操作异常

05. 能够使用try...catch关键字处理异常
    * 企业级写法：
    *    try{
    *          // 可能出现异常的代码
    *    }catch (Exception e){
    *          // 可以捕获一切异常！
               e.printStackTrace(); // 打印异常信息
         }
06. 能够使用throws关键字处理异常
    直接抛出去给调用者
      格式是在方法上加上： throws 异常类型,异常类型,...
     直接抛出： throws Exception

07 能够自定义异常类
   * ItHeimaAgeIlegallException :自定义异常
    *  （1）自定义异常必须继承异常类（Exception , RuntimeException）
    *  （2）重写异常的构造器就可以了
08. 能够处理自定义异常类
    throw new ItHeimaAgeIlegallRuntimeException("年龄不要乱搞！");
    至于怎么处理跟异常的处理完全一样！

09. 说出进程的概念
    进程就是运行中的程序。

10. 说出线程的概念
    线程是属于进程的，参与并发，线程的执行时随机的。

11. 能够理解并发与并行的区别
    并发：分时轮询的抢占CPU运行自己
    并行：同时执行。

12. 能够开启新线程
    start()